import uuid from 'uuid'
import database from '../firebase/firebase'; 
// Basic steps for Action generators -- [1] component calls action generator;  [2] action generator returns object;  
    // [3] component dispatches object;  [4] redux store changes

// Basic steps for Action generators using Redux -- [1] component calls action generator;  [2] action generator returns FUNCTION;  
    // [3] component dispatches function;  [4] function runs (has the ability to dispatch other actions & do whatever it wants);  
    // Note:  Redux by default doesn't let you dispatch functions;  need to add middleware for this to work;  

// ADD_MOVIE action generator
export const addMovie = (movie) => ({    // destructuring the args; default vals; {} if no object
    type: 'ADD_MOVIE', 
    movie
});

// this returns what gets dispatched (usually an object, but returning a function here)
export const startAddMovie = (movieData = {}) => {  // default to {} if movieData not received
    // return gets called by Redux;  dispatch var allows us to use dispatch in the function 
    return (dispatch, getState) => {  // this function only works because we setup the middleware using redux in configureStore.js
        const uid = getState().auth.uid;   // getState is 2nd var in redux async function in line above;  
        const {     // destructure key properties from movieData, could have also done this in the args list 
            title='', 
            year='2020',  
            rating= '0',     
            recap_link= '',   
            reviews_link= '' 
        } = movieData; 
        // we are writing data to Firebase via .push, waiting for that data to sync, & then writing to dispatch (to update Redux)  
        const movie = { title, year, rating, recap_link, reviews_link }; 
        return database.ref(`users/${uid}/movies`).push(movie).then((ref) => {      // .then gets called with reference that we can access via ref
            dispatch(addMovie({    // dispatch needed or redux store will never change;  redux changes show on website
                id: ref.key,    // id generated by Firebase & can be accessed via ref.key
                ...movie
            }));   
        })  // by returning promise chain here will allow us to add a .then() on where this is received (e.g. in movies.test.js);  
    }; 
}

// REMOVE_MOVIE action generator
export const removeMovie = ( {id } = {} ) => ({    // destructuring the args; default vals; {} if no object;  implicity returns object via {{...})
    type: 'REMOVE_MOVIE', 
    id
});

// async action that will fetch the data & then return a function where we dispatch removeMovie  
export const startRemoveMovie = ( {id} = {} ) => {  // no arg needed as we'll be fetching movies;  
    // return gets called by Redux;  dispatch var allows us to use dispatch in the function 
    return (dispatch, getState) => {
        const uid = getState().auth.uid;  
        return database.ref(`users/${uid}/movies/${id}`)   // gets the specific movie from firestore; 
            .remove()               //  remove from firestore the found movie 
            .then(() => {           //  .then() is success function;  
                dispatch(removeMovie({id}));   // update Store to remove movie 
            }); 
    }
}  

// EDIT_MOVIE action generator
export const editMovie = (id, updates) => ({
    type: 'EDIT_MOVIE', 
    id, 
    updates
})

// async action that will fetch/update the data & then return a function where we dispatch editMovie  
export const startEditMovie = ( id, updates ) => {    // updates is an object 
    // return gets called by Redux;  dispatch var allows us to use dispatch in the function 
    return (dispatch, getState) => {
        const uid = getState().auth.uid;  
        return database.ref(`users/${uid}/movies/${id}`)   // gets the specific movie from firestore; return needed so we can add .then() later
            .update(updates)       // update all fields in records provided;
            //.set(...updates)       // works as well;  instructor used .update though     
            .then(() => {           //  .then() is success function;  
                dispatch(editMovie(id, updates));   // update Store to edit movie 
            }); 
    }
}

// SET_MOVIES
export const setMovies = (movies) => ({
    type: 'SET_MOVIES', 
    movies
})

// async action that will fetch the data & then dispatch setMovies  
export const startSetMovies = () => {  // no arg needed as we'll be fetching movies;  
    // return gets called by Redux w/ 2 params;  dispatch var allows us to use dispatch in the function, getState allows us access to state
    return (dispatch, getState) => {  // this function only works because we setup the middleware using redux in configureStore.js
        const uid = getState().auth.uid;   // getState is 2nd var in redux async function in line above;  
        return database.ref(`users/${uid}/movies`)   // create an array from database info using .once() & childSnapshot; 
            .once('value')              // get all the data at this location one time
            .then((snapshot) => {       // .then() is success function;  firebase documenation has more info on .val() & .foreach()
                const movies = []; 
                snapshot.forEach((childSnapshot) => {
                    movies.push({   //  basically creating an array of objects by iterating over Child snapshots;  .key is randomly generated id
                        id: childSnapshot.key, 
                        ...childSnapshot.val()  
                    })
                });    
                console.log('actions = ' + movies); 
                dispatch(setMovies(movies));   // setMovies expects an array 
            }); 
    }
}  
